	 mov R0, null 
	 mov i1, R0 
	 mov R1, null 
	 mov f1, R1 
	 mov R2, null 
	 mov c1, R2 
	 mov R3, null 
	 mov s1, R3 
	 mov R4, null 
	 mov b1, R4 
	 mov R5, 50 
	 mov i2, R5 
	 mov R0, 99.900001 
	 mov f2, R0 
	 mov R0, 'f' 
	 mov c2, R0 
	 mov R0, "Compilers" 
	 mov s2, R0 
	 mov R0, true 
	 mov b2, R0 
	 mov R0, 99 
	 mov i3, R0 
	 mov R0,i2 
	 mov f3, R0 
	 mov R0,c2 
	 mov c3, R0 
	 mov R0,c2 
	 mov s3, R0 
	 mov R0, "5" 
	 mov s4, R0 
	 mov R0, 0 
	 mov b3, R0 
	 mov R0, null 
	 mov x, R0 
	 mov R1, null 
	 mov y, R1 
	 mov R2, null 
	 mov z, R2 
	 mov R3, null 
	 mov result, R3 
Warning : Assigning character to string
	 mov R4, 'f' 
	 mov gty, R4 
	 mov R0,i3 
	 mov xew, R0 
	 mov R0, 5 
	 neg R1, R0 
	 mov x, R1 
	 mov R0, 0 
	 mov R1, 1 
	 add R2, R0, R1 
	 mov y, R2 
Warning : Assigning integer to float
	 mov R0, 5.0 
	 mov R1, .900000 
	 sub R2, R0, R1 
	 mov z, R2 
	 mov R0,x 
	 mov R1,y 
	 mov R2,z 
	 neg R3, R2 
	 mul R4, R1, R3 
	 add R5, R0, R4 
	 mov try, R5 
	 mov R0, "b" 
	 mov p, R0 
	 mov R0,try 
	 mov R1, 1.799999 
	 add R2, R0, R1 
	 mov testing, R2 
	 mov R0,try 
Warning : Assigning integer to float
	 mov R1, 5.0 
	 add R2, R0, R1 
	 mov tewsy, R2 
	 mov R0,tewsy 
	 print R0
	 mov R1, 1 
	 mov a, R1 
	 mov R0, 3 
	 mov b, R0 
	 mov R0, 1 
	 mov c, R0 
	 mov R0, 8 
	 mov d, R0 
	 mov R0,c 
	 mov R1,d 
	 sub R2, R0, R1 
	 mov R3,a 
	 mov R4,b 
	 mul R5, R3, R4 
	 add R6, R2, R5 
	 mov x, R6 
	 mov R0,x 
	 mov R1, 10000 
	 add R2, R0, R1 
	 mov R3,y 
	 inc R3 
	 mov y, R3 
	 mov R4,x 
	 print R4
	 mov R5,y 
	 print R5
Warning : Assigning integer to float
	 mov R6, 90000.0 
	 mov m, R6 
	 mov R0, 0 
	 mov i, R0 
	 mov R0, 0 
	 mov i, R0 
L000:
	 mov R0,i 
	 mov R1, 10 
	 compLESS R2, R0, R1 
	 jnz	L001
	 mov R3, false 
	 mov flag, R3 
	 mov R0,x 
	 mov R1, 2 
	 compGREATER R2, R0, R1 
	jz	L002
	 mov R3, true 
	 mov flag, R3 
	 mov R0,x 
	 inc R0 
	 mov x, R0 
	jmp	L003
L002:
	 mov R1, false 
	 mov flag, R1 
	 mov R0,x 
	 dec R0 
	 mov x, R0 
L003:
	 mov R1,i 
	 inc R1 
	 mov i, R1 
	 jmp	L000
L001:
L004:
	 mov R2,x 
	jz	L005
	 mov R3,x 
	 mov R4, 2 
	 mul R5, R3, R4 
	 mov x, R5 
	 mov R0,c 
	 mov R1,a 
	 compLE R2, R0, R1 
	jz	L006
	 mov R3,a 
	 inc R3 
	 mov a, R3 
L006:
	jmp	L004
L005:
	 mov R4, 999 
	 mov R5,i3 
	 add R6, R4, R5 
	 mov i5, R6 
	 mov R0,x 
	 mov R1, 1 
	 compEQ R2, R0, R1 
	 jnz	L007 
	 mov R2, 0 
	 mov x, R2 
	 jmp Label0 
L007:
	 mov R0, 0 
	 mov y, R0 
Label0: 
	 mov R1,b 
	 mov R2,c 
	 power R3, R1, R2 
	 mov a, R3 
	 mov R0,c 
	 neg R1, R0 
	 mov x, R1 
	 mov R0,i5 
	 mov R1,i3 
	 compNE R2, R0, R1 
	jz	L008
	 mov R3,x 
	 mov R4,i5 
	 add R5, R3, R4 
	 mov R6,x 
	 mov R7, 5 
	 compGREATER R8, R6, R7 
	jz	L009
	 mov R9,x 
	 mov R10, 2 
	 div R11, R9, R10 
	 mov R12,y 
	 mov R13, 10 
	 mul R14, R12, R13 
	 mov R15,z 
	 mov R16, 5.500000 
	 sub R17, R15, R16 
L009:
	jmp	L010
L008:
	 mov R18, "The_End" 
	 mov done, R18 
	 mov R0,done 
	 print R0
L010:
	 mov R1, "Finish" 
	 mov Finish, R1 
